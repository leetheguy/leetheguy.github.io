// Generated by CoffeeScript 1.7.1
var Command, State, dispatcher;

State = function(navList, eventList, screen) {
  this.navList = navList;
  this.eventList = eventList;
  this.screen = screen;
  this.load = function() {
    this.beforeLoad();
    this.addScreen();
    this.afterLoad();
    this.duringState();
    return this;
  };
  this.beforeLoad = function() {
    return null;
  };
  this.addScreen = function() {
    app.addChild(this.screen);
    return null;
  };
  this.afterLoad = function() {
    return null;
  };
  this.duringState = function() {
    return null;
  };
  this.unload = function() {
    this.beforeUnload();
    this.removeScreen();
    this.afterUnload();
    return null;
  };
  this.filterCommands = function() {
    return null;
  };
  this.beforeUnload = function() {
    return null;
  };
  this.removeScreen = function() {
    app.removeChild(this.screen);
    return null;
  };
  this.afterUnload = function() {
    return null;
  };
  return this;
};

Command = function(type, args) {
  var _ref, _ref1, _ref2;
  this.type = type;
  cjs.Event.call(this, this.type);
  this.fromPt = args.fromPt;
  if (this.fromPt == null) {
    this.fromPt = {
      x: -1,
      y: -1
    };
  }
  this.fromPt = new cjs.Point(this.fromPt.x, this.fromPt.y);
  this.fromX = this.fromPt.x;
  this.fromY = this.fromPt.y;
  this.toPt = args.toPt;
  if (this.toPt == null) {
    this.toPt = {
      x: -1,
      y: -1
    };
  }
  this.toPt = new cjs.Point(this.toPt.x, this.toPt.y);
  this.toX = this.toPt.x;
  this.toY = this.toPt.y;
  this.fromEnt = (_ref = args.fromEntity) != null ? _ref : null;
  this.toEnt = (_ref1 = args.toEntity) != null ? _ref1 : null;
  return this.message = (_ref2 = args.message) != null ? _ref2 : "";
};

Command.prototype = Object.create(cjs.Event.prototype);

dispatcher = {
  initScreens: function() {
    return this.screens = {
      splash1: initSplash1(),
      splash2: initSplash2(),
      board: app.board
    };
  },
  initStates: function() {
    var splash1, splash2;
    splash1 = new State({
      nextSplash: "splash2"
    }, [], this.screens.splash1);
    splash1.duringState = function() {
      return new cjs.Tween().wait(300).call(app.dispatcher.dispatch, [new cjs.Event("nextSplash")], app.dispatcher);
    };
    splash2 = new State({
      nextSplash: "board"
    }, [], this.screens.splash2);
    splash2.duringState = function() {
      return new cjs.Tween().wait(300).call(app.dispatcher.dispatch, [new cjs.Event("nextSplash")], app.dispatcher);
    };
    return this.states = {
      splash1: splash1,
      splash2: splash2,
      board: new State({}, ["player requests move"], this.screens.board)
    };
  },
  init: function() {
    this.initScreens();
    this.initStates();
    this.current_state = this.states.splash1.load();
    return this;
  },
  dispatch: function(event) {
    if (this.current_state.navList[event.type] !== void 0) {
      this.current_state.unload();
      this.current_state = this.states[this.current_state.navList[event.type]].load();
    } else if (this.current_state.eventList.indexOf(event.type) >= 0) {
      this.dispatchEvent(event);
    }
    return null;
  }
};

//# sourceMappingURL=States.map
